package group

import (
    "fmt"
    "github.com/josuebrunel/sportdropin/pkg/models"
    "github.com/josuebrunel/sportdropin/pkg/view"
    "github.com/josuebrunel/sportdropin/pkg/view/component"
)

templ GroupFormView(r Response, attr templ.Attributes) {
    <article>
        <header>
            <a href="#close" aria-label="Close" class="close" data-target="group-modal" hx-get="#"
                hx-target="#group-modal" hx-swap="delete"></a>
        </header>
        <form hx-target="#container" {attr...} >
            @component.InputCSRF(view.Get[string](ctx, "csrf"))
            <div>
                @component.InputWithLabel("sport",templ.Attributes{"type": "text", "name": "sport", "value": r.One().Sport, "required": true})
                if !r.Errors.IfNil("sport") { 
                    @component.Error(r.Errors.Get("sport")) 
                }
            </div>
            <div>
                @component.InputWithLabel("name", templ.Attributes{"type": "text", "name": "name", "value": r.One().Name, "required": true})
                if !r.Errors.IfNil("name") { 
                    @component.Error(r.Errors.Get("name")) 
                }
            </div>
            <div>
                @component.TextAreaWithLabel(
                    "description", templ.Attributes{"name": "description", "id": "description", "cols": "30", "rows": "10"}, r.One().Description.String)
            </div>
            <div>
                @component.InputWithLabel("street", templ.Attributes{"type": "text", "name": "street", "value": r.One().Street.String, "required": true})
                if !r.Errors.IfNil("street") { 
                    @component.Error(r.Errors.Get("street")) 
                }
            </div>
            <div class="grid">
                @component.InputWithLabel("city", templ.Attributes{"type": "text", "name": "city", "value": r.One().City.String, "required": true})
                if !r.Errors.IfNil("city") { 
                    @component.Error(r.Errors.Get("city")) 
                }
                @component.InputWithLabel("country", templ.Attributes{"type": "text", "name": "country", "value": r.One().Country.String, "required": true})
                if !r.Errors.IfNil("country") { 
                    @component.Error(r.Errors.Get("country")) 
                }
            </div>
            @component.ButtonSubmit("Save", templ.Attributes{
                "value": "save", 
                "class": "primary",
            })
            @component.ButtonReset("Cancel", templ.Attributes{
                "value": "cancel",
                "class": "contrast",
            })
            @component.ButtonSubmit("Delete", templ.Attributes{
                "value": "delete",
                "class": "secondary",
                "hx-delete": view.Reverse(ctx, "group.delete", r.One().UUID),
                "hx-confirm": "Do you really want to delete this group?",
                "hx-headers": fmt.Sprintf(`{"csrf": "%s"}`, view.Get[string](ctx, "csrf")),
            })
        </form>
    </article>
}

templ GroupListView(gg models.GroupSlice) {
    <div id="groups" hx-get={ view.Reverse(ctx, "group.list")} hx-trigger="groupChange from:body" hx-target="this">
    if len(gg) == 0 {
        <p>No group found</p>
    }
    for _, g := range gg {
        <article>
            <hgroup>
                <h4>
                    @component.Link(g.Name, "", templ.Attributes{
                        "hx-get": view.Reverse(ctx, "group.get", g.UUID),
                        "hx-target": "#groups",
                    })
                </h4>
                <small><em>{ g.Street.String }, { g.City.String }, { g.Country.String }</em></small>
                <hr />
            </hgroup>
            <p>{ g.Description.String }</p>

        </article>
    }
    @component.Link("Add a group", "", templ.Attributes{
        "hx-get":  view.Reverse(ctx, "group.create"),
        "hx-target": "#groups",
        "role": "button",
    })
    </div>
}

templ GroupDetailView(g models.Group) {
    <article>
        <header>
            @component.Link(g.Name, view.Reverse(ctx, "group.get", g.UUID), templ.Attributes{})
        </header>
        <div>
            <p> { g.Description.String }</p>
        </div>
        <footer>
            <small>
                <span>{ g.Street.String }</span>
                <span>{ g.City.String }</span>
                <span>{ g.Country.String }</span>
            </small>
        </footer>
</article>
}
